---
import { asText } from '@prismicio/client';
import { Card, PrismicHtml, TitleCard } from '../components';
import { fetchSingleDocumentByType, fetchRelatedDocumentsByTypeAndIDs } from '../lib/prismic/queries';
import Layout from '../layouts/Layout.astro';
import '../styles/pages/homepage.scss';

const { data } = await fetchSingleDocumentByType({
	type: 'homepage',
	options: {
		fetchLinks: [
			'event.event_name',
			'event.uid',
			'event.description',
			'event.winner_gold',
			'event.winner_silver',
			'event.winner_bronze',
			'event.winner_honorable_mention',
			'plane.name'
		],
	}
}) || {};

const {
	title_cards = [],
	events_headline,
	featured_events = [],
	how_headline,
	instructions = [],
  event_date_headline,
	event_date,
	results_headline,
	results_desc
} = data;

const featuredEventIDs = featured_events.map(({ event }) => event.id) || [];

const eventPlanes = await fetchRelatedDocumentsByTypeAndIDs({
	type: 'plane',
  linkedType: 'event',
	ids: featuredEventIDs,
	options: {
		fetchLinks: ['pilot.name'],
	}
}) || [];
---

<Layout id="homepage" title="Homepage">
	<h1 class="sr-only">Paper Plane Olymics</h1>

	{title_cards.map(({ rich_text, animation_type }, i) => (
		<section id={`title-card-${i + 1}`} class="container">
      <TitleCard
        text={rich_text}
        animation={animation_type}
      />
    </section>
	))}

  <section id="date" class="container">
		<PrismicHtml html={event_date_headline} />
		<p>{event_date || 'TBD'}</p>
  </section>

	<section id="events" class="container">
		<PrismicHtml html={events_headline} />
		<ul class="list list--featured-events">
			{featured_events.map(({ event: { id: eventID = "", data } }) => {
				const entries = eventPlanes.filter((plane) => plane.data.event.id === eventID);
				const numOfPlaceholders = 3 - (entries.length % 3);

				return (
					<li class="event">
						<div class="event__desc container--sm">
							<h3 class="h4">{asText(data.event_name)}</h3>
							<PrismicHtml html={data.description} />
						</div>

						<ul class="list list--participants">
							{entries.map(({ url, data: plane }) => {

								const pilot = plane.pilot?.data?.name?.length
									? asText(plane.pilot.data.name)
									: 'Mystery Pilot';

								return (
									<li>
										<Card
											url={url}
											title={asText(plane.name)}
											subtitle={`Flown by ${pilot}`}
											photo={plane.photo}
											titleTag="h4"
  										subtitleTag="h5"
										/>
									</li>
								);
							})}

							{Array.from({ length: numOfPlaceholders }).map(() => (
								<li>
									<Card
										isPlaceholder
										title="[Plane Name]"
										subtitle="Flown by [Pilot Name]"
										titleTag="h4"
  									subtitleTag="h5"
									/>
								</li>
							))}
						</ul>
					</li>
				)
			})}
		</ul>
	</section>

	<section id="how-to-enter" class="container">
		<PrismicHtml html={how_headline} />
		<ul>
			{instructions.map(({ step }) => (
				<li>
					<PrismicHtml html={step} />
				</li>
			))}
		</ul>
	</section>

	<section id="results" class="container">
		<PrismicHtml html={results_headline} />
		<PrismicHtml html={results_desc} />
	</section>
</Layout>